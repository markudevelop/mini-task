{"ast":null,"code":"var _jsxFileName = \"/Users/markuretsky/git/mini-task/src/App.tsx\",\n  _s = $RefreshSig$();\n// Problem statement:\n// Given a component consisting of 3 checkboxes and a button.\n// The task is to implement the functionality of the button,\n// which will change according to the following conditions:\n\n// - If one or more checkboxes are not selected (checked: false),\n// then when the button is clicked, all unselected checkboxes become selected.\n// - If all checkboxes are selected (checked: true),\n// then when the button is clicked, all checkboxes become unselected.\nimport React, { useState, useMemo } from \"react\";\nimport { generatInitialCheckboxes } from \"./utils/generateCheckboxes\";\nimport Checkbox from \"./components/Checkbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialCheckboxes = generatInitialCheckboxes(3);\nexport default function App() {\n  _s();\n  const [checkboxes, setCheckboxes] = useState(initialCheckboxes);\n  const isAnyUnselected = useMemo(() => Object.values(checkboxes).find(v => !v) === false, [checkboxes]);\n  const isAllSelected = !isAnyUnselected;\n  const changeValue = (key, value) => {\n    setCheckboxes(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n  const handleButtonClick = () => {\n    setCheckboxes(state => {\n      const newObj = {};\n      Object.keys(state).forEach(key => newObj[key] = isAllSelected ? false : true);\n      return newObj;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: isAllSelected ? \"Unselect All\" : \"Select All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), Object.entries(checkboxes).map(_ref => {\n      let [key, value] = _ref;\n      return /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: value,\n        name: key,\n        onChange: ev => changeValue(key, ev.target.checked)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true);\n}\n_s(App, \"IY+GdUidOUkCH9pCmzCCP+1nw3g=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","generatInitialCheckboxes","Checkbox","jsxDEV","_jsxDEV","Fragment","_Fragment","initialCheckboxes","App","_s","checkboxes","setCheckboxes","isAnyUnselected","Object","values","find","v","isAllSelected","changeValue","key","value","prev","handleButtonClick","state","newObj","keys","forEach","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","entries","map","_ref","checked","name","onChange","ev","target","_c","$RefreshReg$"],"sources":["/Users/markuretsky/git/mini-task/src/App.tsx"],"sourcesContent":["// Problem statement:\n// Given a component consisting of 3 checkboxes and a button.\n// The task is to implement the functionality of the button,\n// which will change according to the following conditions:\n\n// - If one or more checkboxes are not selected (checked: false),\n// then when the button is clicked, all unselected checkboxes become selected.\n// - If all checkboxes are selected (checked: true),\n// then when the button is clicked, all checkboxes become unselected.\nimport React, { useState, useMemo } from \"react\";\n\nimport { generatInitialCheckboxes } from \"./utils/generateCheckboxes\";\nimport Checkbox from \"./components/Checkbox\";\n\ninterface Checkboxes {\n  [key: string]: boolean;\n}\n\nconst initialCheckboxes: Checkboxes = generatInitialCheckboxes(3);\n\nexport default function App() {\n  const [checkboxes, setCheckboxes] = useState<Checkboxes>(initialCheckboxes);\n\n  const isAnyUnselected = useMemo(\n    () => Object.values(checkboxes).find((v) => !v) === false,\n    [checkboxes]\n  );\n\n  const isAllSelected = !isAnyUnselected;\n\n  const changeValue = (key: string, value: boolean) => {\n    setCheckboxes((prev) => ({ ...prev, [key]: value }));\n  };\n\n  const handleButtonClick = () => {\n    setCheckboxes((state) => {\n      const newObj: any = {};\n      Object.keys(state).forEach(\n        (key) => (newObj[key] = isAllSelected ? false : true)\n      );\n      return newObj;\n    });\n  };\n\n  return (\n    <>\n      <button onClick={handleButtonClick}>\n        {isAllSelected ? \"Unselect All\" : \"Select All\"}\n      </button>\n      <p />\n      {Object.entries(checkboxes).map(([key, value]) => (\n        <Checkbox\n          key={key}\n          checked={value}\n          name={key}\n          onChange={(ev) => changeValue(key, ev.target.checked)}\n        />\n      ))}\n    </>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAEhD,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,OAAOC,QAAQ,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAM7C,MAAMC,iBAA6B,GAAGN,wBAAwB,CAAC,CAAC,CAAC;AAEjE,eAAe,SAASO,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAaQ,iBAAiB,CAAC;EAE3E,MAAMK,eAAe,GAAGZ,OAAO,CAC7B,MAAMa,MAAM,CAACC,MAAM,CAACJ,UAAU,CAAC,CAACK,IAAI,CAAEC,CAAC,IAAK,CAACA,CAAC,CAAC,KAAK,KAAK,EACzD,CAACN,UAAU,CACb,CAAC;EAED,MAAMO,aAAa,GAAG,CAACL,eAAe;EAEtC,MAAMM,WAAW,GAAGA,CAACC,GAAW,EAAEC,KAAc,KAAK;IACnDT,aAAa,CAAEU,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACF,GAAG,GAAGC;IAAM,CAAC,CAAC,CAAC;EACtD,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9BX,aAAa,CAAEY,KAAK,IAAK;MACvB,MAAMC,MAAW,GAAG,CAAC,CAAC;MACtBX,MAAM,CAACY,IAAI,CAACF,KAAK,CAAC,CAACG,OAAO,CACvBP,GAAG,IAAMK,MAAM,CAACL,GAAG,CAAC,GAAGF,aAAa,GAAG,KAAK,GAAG,IAClD,CAAC;MACD,OAAOO,MAAM;IACf,CAAC,CAAC;EACJ,CAAC;EAED,oBACEpB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,gBACEvB,OAAA;MAAQwB,OAAO,EAAEN,iBAAkB;MAAAK,QAAA,EAChCV,aAAa,GAAG,cAAc,GAAG;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACT5B,OAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACJnB,MAAM,CAACoB,OAAO,CAACvB,UAAU,CAAC,CAACwB,GAAG,CAACC,IAAA;MAAA,IAAC,CAAChB,GAAG,EAAEC,KAAK,CAAC,GAAAe,IAAA;MAAA,oBAC3C/B,OAAA,CAACF,QAAQ;QAEPkC,OAAO,EAAEhB,KAAM;QACfiB,IAAI,EAAElB,GAAI;QACVmB,QAAQ,EAAGC,EAAE,IAAKrB,WAAW,CAACC,GAAG,EAAEoB,EAAE,CAACC,MAAM,CAACJ,OAAO;MAAE,GAHjDjB,GAAG;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIT,CAAC;IAAA,CACH,CAAC;EAAA,eACF,CAAC;AAEP;AAACvB,EAAA,CAxCuBD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}